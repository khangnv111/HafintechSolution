@{
    Layout = "~/Views/Shared/_LayoutDeclaration.cshtml";
}

<div class="row-fluid" id="ITF">
    <div class="span12">
        <div class="widget-box">
            <div class="widget-title">
                <span class="icon"> <i class="icon-align-justify"></i> </span>
                <h5>Tham chiếu tờ khai vận chuyển</h5>
            </div>
            <div class="widget-content nopadding">
                <div class="form-horizontal">
                    <div class="row-fluid">
                        <div class="span6">
                            <div class="control-group span12">
                                <label class="control-label" style="width: 220px;">Số tờ khai vận chuyển: </label>
                                <div class="controls">
                                    <input style="width:350px; margin-left: 20px" type="text" class="span5" id="txtbtDclNo" name="txtbtDclNo"
                                           placeholder="Số tờ khai vận chuyển" v-model="btDclNo" />
                                </div>
                            </div>
                            @*<div class="control-group span12">
                                    <label class="control-label">Ngày dự kiến kết thúc vận chuyển:</label>
                                    <div class="controls" style="position:relative;">
                                        <input type="date" class="span11 dDate" v-model="data.dateOfTrsCtrct" maxlength="8" />
                                    </div>
                                </div>
                                <div class="control-group span12">
                                    <label class="control-label">Cơ quan hải quan tiếp nhận tờ khai:</label>
                                    <div class="controls" style="position:relative;">
                                        <input type="text" class="span11" v-model="data.dateOfTrsCtrct"/>
                                    </div>
                                </div>
                                <div class="control-group span12">
                                    <label class="control-label">Cơ quan hải quan địa điểm đích:</label>
                                    <div class="controls" style="position:relative;">
                                        <input type="text" class="span11" v-model="data.dateOfTrsCtrct" />
                                    </div>
                                </div>*@
                            <div class="control-group span12">
                                <div class="controls">
                                    <button class="btn btn-success" style="margin-left: 20px;" v-on:click="submitITF(510)" v-show="isSubmit==true">Tìm kiếm</button>
                                    <button class="btn btn-success" style="margin-left: 20px;" v-on:click="submitUSB(510)" v-show="isSubmitUSB==true">Tìm kiếm</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<input type="hidden" class="span5" id="olaid" name="olaid" value="@ViewBag.decId" />
<script src="~/Content/js/ola-onload.trinhky.js"></script>
<script>
    var app = new Vue({
        el: '#ITF',
        data: {
            btDclNo: '',
            statusTK: 0,
            isSubmitUSB: false,
            isSubmit: false,
            jobcode: "",
            lstDeclaration: []
        },
        methods: {
            init: async function () {
                var data = this.data;
                data.cstOffice = ""
                data.groupTypeId = "";
                data.clsOrgCd = "";
                data.insClsCd = "";
                data.clearanStatus = 0;
                data.status = 0;
                data.statusCode = "";
                data.type = 0;
                data.startCreatedDate = "";
                data.endCreatedDate = "";
                data.btDclNo = "";
                data.meansOfTrsCd = "";
                data.transType = "";
                data.transPurposeCd = "";
                data.transCtrctNo = "";
                utils.Loading();
                utils.unLoading();

            },
            ShowSubmit: async function () {
                var url = new URL(window.location.href);
                var accId = $("#accIdLogin").val();
                var accountInfo;
                var olaId = url.searchParams.get("olaid");
                if (!olaId || olaId <= 0) {
                    accountInfo = await Lib.GetAccountInfo();
                } else {
                    accountInfo = await Lib.GetInfoByAccountID(accId);
                }
                if (accountInfo.Business.submitMethod == null) {
                    this.isSubmitUSB = true;
                    this.isSubmit = true;
                } else if (accountInfo.Business.submitMethod == 0) {
                    this.isSubmitUSB = true;
                }
                else if (accountInfo.Business.submitMethod == 1) {
                    this.isSubmit = true;
                }
            },
            SearchOLA: async function (btDclNo) {
                debugger;
                try {
                    var token = $('#hdfToken').val();
                    var cstOffice = "";
                    var accountId;
                    if (utils.getCookie("Type") == "1") {
                        accountId = utils.getCookie("parentId");
                    }
                    else {
                        accountId = $("#accIdLogin").val();
                    }
                    var dt = this.data;
                    const response = await axios.get(Config.API_Login + "TransportDeclaration/SearchOLA?meansOfTrsCd=" + dt.meansOfTrsCd + "&btDclNo=" + dt.btDclNo + "&cstOffice=" + cstOffice + "&transPurposeCd=" + dt.transPurposeCd +
                        "&startCreatedDate=" + dt.startCreatedDate + "&endCreatedDate=" + dt.endCreatedDate + "&transCtrctNo=" + dt.transCtrctNo + "&transType=" + dt.transType
                        + "&page=" + page + "&count=10&accountId=" + accountId,
                        {
                            headers: { "Authorization": "Bearer " + token },
                        });
                    var res = response.data;
                    if (res.ResponseCode >= 0) {
                        this.data.lstDeclaration = response.data.Data.ListOla;
                    } else {
                        bootbox.alert("Tờ khai không tồn tại");
                        return;
                    }
                } catch (error) {
                    console.error(error);
                }
            },
            submitITF: function (status) {
                utils.Loading();
                var token = $('#hdfToken').val();

                if (!this.btDclNo) {
                    utils.Message("Chưa nhập tờ khai");
                }
                var dclNos = this.btDclNo;
                dclNos = dclNos.trim();
                $.ajax({
                    type: 'POST',
                    url: Config.API_Login + "TransportDeclaration/SubmitOLA",
                    data: JSON.stringify({
                        "btDclNo": dclNos,
                        "status": status
                    }),
                    headers: {
                        "Authorization": "Bearer " + token
                    },
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (data) {
                        console.log(data);
                        utils.unLoading();
                        if (data) {
                            if (data.ResponseCode > 0 && data.Data != null) {
                                bootbox.alert('Thành công!', function () {
                                    window.location.href = Config.Url_Root + "TransportDeclaration/itf?olaid=" + data.Data.btDclId + "&ishight=7&tab=8";
                                });
                                //if (statusCode == "OLA") {
                                //    bootbox.alert('Thành công!', function () {
                                //        window.location.href = Config.Url_Root + "TransportDeclaration/ola?olaid=" + data.Data.btDclId + "&ishight=7&tab=1";
                                //    });
                                //} else if (statusCode == "OLC") {
                                //    bootbox.alert('Thành công!', function () {
                                //        window.location.href = Config.Url_Root + "TransportDeclaration/olc?olaid=" + data.Data.btDclId + "&ishight=7&tab=3";
                                //    });
                                //}
                                //else if (statusCode == "COT") {
                                //    bootbox.alert('Thành công!', function () {
                                //        window.location.href = Config.Url_Root + "TransportDeclaration/cot?olaid=" + data.Data.btDclId + "&ishight=7&tab=5";
                                //    });
                                //}

                            }
                            else if (data.ResponseCode == -100001) {
                                utils.Message("Tờ khai không tồn tại");
                            }
                            else {
                                if (data.Data && data.Data.object) {
                                    bootbox.confirm({
                                        title: "THÔNG BÁO",
                                        message: "Description: " + data.Data.object[0].Description + "<br>Name: " + data.Data.object[0].Name,
                                        buttons: {
                                            confirm: {
                                                label: '<i class="fa fa-check"></i> Confirm'
                                            }
                                        },
                                        callback: function () {
                                        }
                                    });
                                }
                                else {
                                    bootbox.alert(data.Description);
                                }
                            }
                        }
                    },
                    error: function (data) {
                        bootbox.alert("Hệ thống bận, vui lòng quay lại sau!");
                        utils.unLoading();
                        return;
                    }
                });
            },
            signDecla: function () {

                if (utils.getCookie("Type") == 1 && utils.getCookie("permitGroup") == 3) {
                    bootbox.alert(" Doanh nghiệp chưa cho phép đại lý trình ký!");
                    return;
                }

                var self = this;
                var token = $('#hdfToken').val();
                utils.Loading();
                $.ajax({
                    url: Config.API_Login + "agency/GetSignatureExport",
                    type: 'POST',
                    data: JSON.stringify({ dclId: this.data.declarationId }),
                    headers: {
                        "Authorization": "Bearer " + token
                    },
                    cache: false,
                    contentType: "application/json; charset=utf-8",
                    processData: false,
                    success: function (data) {
                        utils.unLoading();
                        if (data) {
                            if (data.ResponseCode > 0) {
                                bootbox.alert("Thành công!");
                                self.data = data.Data;
                            }
                            else if (data.ResponseCode == -100001) {
                                bootbox.alert(data.Description);
                            }
                            else {
                                bootbox.alert(JSON.stringify(data.Data.message));
                            }
                        }
                        else {
                            bootbox.alert("Hệ thống bận, vui lòng quay lại sau!");
                        }
                    },
                    error: function (data) {
                        bootbox.alert("Hệ thống bận, vui lòng quay lại sau!");
                        utils.unLoading();
                    }
                });
            },
            submitUSB: function (status) {
                debugger;
                if ($("#downSignkey").val() == 1) {
                    bootbox.confirm("Bạn chưa có Chữ ký số hoặc Chữ số ký chưa cập nhật. <br> Mời bạn tải Chữ ký số", function (res) {
                        if (res) {
                            downTK();
                        }
                    });
                    return;
                }
                this.statusTK = status;
                var data = {
                    "dclNo": this.btDclNo.trim(),
                    "status": status
                }
                utils.Loading();
                var xhttp = new XMLHttpRequest();
                xhttp.withCredentials = true;
                xhttp.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200) {
                        utils.unLoading();
                        var jsonObj = JSON.parse(xhttp.responseText);
                        if (jsonObj["ResponseCode"] >= 0) {
                            var ediStr = jsonObj["Data"].replace('"', '');
                            sendWsJs(CMD.SIGN_TXT, FORMAT.BINARY, [ediStr]);
                        }
                        else {
                            if (jsonObj.Data) {
                                bootbox.alert(jsonObj.Data.message);
                            }
                            else {
                                bootbox.alert(jsonObj.Description);
                            }
                        }
                    }
                };
                xhttp.open("POST", Config.API_Login + "Agency/GetEdiToSign", true);
                xhttp.setRequestHeader("content-type", "application/json");
                xhttp.send(JSON.stringify(data));
            },
        },
        mounted() {
            var self = this;
            this.ShowSubmit();
        },
    });
</script>